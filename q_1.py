# -*- coding: utf-8 -*-
"""Q_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bQX-_16jQmgnKGM75C__GBDbyIilvxZh
"""

pip install qiskit

from qiskit import IBMQ
IBMQ.save_account('5b4ef1d395890d0ca146117c2bd47137961d074a0e708ef3eabdeb9902d5b35ff55399d64e318dc6e94ab19a9b7c4383b0340a3b2c6b1ffe75843e144beafce7')

import numpy as np
from qiskit import(
  QuantumCircuit,
  execute,
  Aer)
from qiskit.visualization import plot_histogram

# Use Aer's qasm_simulator
simulator = Aer.get_backend('qasm_simulator')

# Create a Quantum Circuit acting on the q register
circuit = QuantumCircuit(2, 2)

# Add a H gate on qubit 0
circuit.h(0)

# Add a CX (CNOT) gate on control qubit 0 and target qubit 1
circuit.cx(0, 1)

# Map the quantum measurement to the classical bits
circuit.measure([0,1], [0,1])

# Execute the circuit on the qasm simulator
job = execute(circuit, simulator, shots=1000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)

# Draw the circuit
circuit.draw()

plot_histogram(counts)